from .utils.lazy_loader import LazyLoader as LazyLoader
from typing import Any

yatai_proto: Any

class BentoMLException(Exception):
    @property
    def proto_status_code(self): ...
    @property
    def status_proto(self): ...
    @property
    def status_code(self): ...

class RemoteException(BentoMLException):
    payload: Any
    def __init__(self, *args, payload, **kwargs) -> None: ...

class BentoMLRpcError(BentoMLException):
    grpc_error: Any
    message: Any
    grpc_error_message: str
    def __init__(self, grpc_error, message) -> None: ...

class Unauthenticated(BentoMLException):
    @property
    def proto_status_code(self): ...

class InvalidArgument(BentoMLException):
    @property
    def proto_status_code(self): ...

class APIDeprecated(BentoMLException):
    @property
    def proto_status_code(self): ...

class BadInput(InvalidArgument): ...

class NotFound(BentoMLException):
    @property
    def proto_status_code(self): ...

class FailedPrecondition(BentoMLException):
    @property
    def proto_status_code(self): ...

class LockUnavailable(BentoMLException):
    @property
    def proto_status_code(self): ...

class ArtifactLoadingException(BentoMLException): ...
class BentoMLConfigException(BentoMLException): ...
class MissingDependencyException(BentoMLException): ...
class YataiServiceException(BentoMLException): ...

class YataiServiceRpcAborted(YataiServiceException):
    @property
    def proto_status_code(self): ...

class YataiDeploymentException(YataiServiceException): ...
class YataiRepositoryException(YataiServiceException): ...
class AWSServiceError(YataiDeploymentException): ...
class AzureServiceError(YataiDeploymentException): ...
class CLIException(BentoMLException): ...
class YataiLabelException(YataiServiceException): ...
