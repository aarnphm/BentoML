from ..configuration.containers import BentoMLContainer as BentoMLContainer
from ..exceptions import BentoMLException as BentoMLException
from ..utils import cached_property as cached_property
from ..utils.ruamel_yaml import YAML as YAML
from .pip_pkg import EPP_NO_ERROR as EPP_NO_ERROR, EPP_PKG_NOT_EXIST as EPP_PKG_NOT_EXIST, EPP_PKG_VERSION_MISMATCH as EPP_PKG_VERSION_MISMATCH, get_pkg_version as get_pkg_version, verify_pkg as verify_pkg
from typing import Any, List

logger: Any
PYTHON_SUPPORTED_VERSIONS: Any
PYTHON_MINOR_VERSION: Any
PYTHON_VERSION: Any
DEFAULT_CONDA_ENV_BASE_YAML: str

class CondaEnv:
    default_env_yaml_file: Any
    def __init__(self, name: str = ..., channels: List[str] = ..., dependencies: List[str] = ..., default_env_yaml_file: str = ..., override_channels: bool = ...) -> None: ...
    def set_name(self, name) -> None: ...
    def add_conda_dependencies(self, conda_dependencies: List[str]): ...
    def set_channels(self, channels: List[str], override_channels: bool = ...): ...
    def write_to_yaml_file(self, filepath) -> None: ...

class BentoServiceEnv:
    def __init__(self, pip_packages: List[str] = ..., pip_index_url: str = ..., pip_trusted_host: str = ..., pip_extra_index_url: str = ..., infer_pip_packages: bool = ..., requirements_txt_file: str = ..., conda_channels: List[str] = ..., conda_overwrite_channels: bool = ..., conda_override_channels: bool = ..., conda_dependencies: List[str] = ..., conda_env_yml_file: str = ..., setup_sh: str = ..., docker_base_image: str = ..., default_docker_base_image: str = ..., zipimport_archives: List[str] = ..., bentoml_deployment_version: str = ...) -> None: ...
    def add_conda_dependencies(self, conda_dependencies: List[str]): ...
    def add_pip_packages(self, pip_packages: List[str]): ...
    def add_pip_package(self, pip_package: str): ...
    def set_setup_sh(self, setup_sh_path_or_content) -> None: ...
    def requirements_txt_content(self): ...
    def infer_pip_packages(self, bento_service) -> None: ...
    def save(self, path) -> None: ...
    def to_dict(self): ...
