from typing import Any

def wrap_line(s, line_width: int = ..., sep: str = ...): ...
def dict_tab(d, in_row: bool = ...): ...
def percentile(data, pers): ...

class DynamicBucketMerge:
    bucket_num: Any
    sample_range: Any
    bucket: Any
    bucket_sample: Any
    bucket_ver: Any
    def __init__(self, sample_range: int = ..., bucket_num: int = ...) -> None: ...
    def put(self, timestamp, num) -> None: ...
    def sum(self, timestamp): ...
    def mean(self, timestamp): ...

class Stat:
    success: int
    fail: int
    succ_ps: Any
    exec_ps: Any
    succ_times: Any
    exec_times: Any
    succ_time_ps: Any
    exec_time_ps: Any
    client_busy: int
    exceptions: Any
    def __init__(self) -> None: ...
    @property
    def req_total(self): ...
    @property
    def sess_time(self): ...
    def log_succeed(self, req_time, n: int = ...) -> None: ...
    def log_exception(self, group, msg, req_time, n: int = ...) -> None: ...
    def print_step(self) -> None: ...
    def print_sumup(self) -> None: ...
    def print_exec(self) -> None: ...

def default_verify_response(status, _): ...

class BenchmarkClient:
    STATUS_STOPPED: int
    STATUS_SPAWNING: int
    STATUS_SPAWNED: int
    STATUS_STOPPING: int
    request_interval: Any
    request_producer: Any
    verify_response: Any
    url_override: Any
    user_pool: Any
    status: Any
    stat: Any
    timeout: Any
    def __init__(self, request_producer: callable, request_interval, verify_response: callable = ..., url_override: Any | None = ..., timeout: int = ...) -> None: ...
    def spawn(self) -> None: ...
    def kill(self): ...
    def batch_spawn(self, total, speed) -> None: ...
    def killall(self) -> None: ...
    def start_session(self, session_time, total_user, spawn_speed: Any | None = ...) -> None: ...
