import pickle
from functools import partial as partial
from pickle import _Pickler as Pickler
from typing import Any

DEFAULT_PROTOCOL: Any
string_types: Any
PY3: bool
PY2: bool

def cell_set(cell, value): ...

STORE_GLOBAL: Any
DELETE_GLOBAL: Any
LOAD_GLOBAL: Any
GLOBAL_OPS: Any
HAVE_ARGUMENT: Any
EXTENDED_ARG: Any

def islambda(func): ...

class CloudPickler(Pickler):
    dispatch: Any
    globals_ref: Any
    def __init__(self, file, protocol: Any | None = ...) -> None: ...
    def dump(self, obj): ...
    def save_memoryview(self, obj) -> None: ...
    def save_module(self, obj) -> None: ...
    def save_codeobject(self, obj) -> None: ...
    def save_function(self, obj, name: Any | None = ...): ...
    def save_dynamic_class(self, obj) -> None: ...
    def save_function_tuple(self, func) -> None: ...
    @classmethod
    def extract_code_globals(cls, co): ...
    def extract_func_data(self, func): ...
    def save_builtin_function(self, obj): ...
    def save_global(self, obj, name: Any | None = ..., pack=...): ...
    def save_instancemethod(self, obj) -> None: ...
    def save_inst(self, obj) -> None: ...
    def save_property(self, obj) -> None: ...
    def save_classmethod(self, obj) -> None: ...
    def save_itemgetter(self, obj): ...
    attrs: Any
    index: Any
    def save_attrgetter(self, obj): ...
    def save_file(self, obj): ...
    def save_ellipsis(self, obj) -> None: ...
    def save_not_implemented(self, obj) -> None: ...
    def save_weakset(self, obj) -> None: ...
    def save_logger(self, obj) -> None: ...
    def save_root_logger(self, obj) -> None: ...
    def save_mappingproxy(self, obj) -> None: ...
    def inject_addons(self) -> None: ...

def is_tornado_coroutine(func): ...
def dump(obj, file, protocol: Any | None = ...) -> None: ...
def dumps(obj, protocol: Any | None = ...): ...
load = pickle.load
loads = pickle.loads

def subimport(name): ...
def dynamic_subimport(name, vars): ...
def instance(cls): ...

class _empty_cell_value:
    @classmethod
    def __reduce__(cls): ...
