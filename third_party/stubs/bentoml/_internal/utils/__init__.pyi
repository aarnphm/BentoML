from ..utils.gcs import is_gcs_url as is_gcs_url
from ..utils.s3 import is_s3_url as is_s3_url
from google.protobuf.message import Message
from typing import Any, Callable, Optional

class _Missing:
    def __reduce__(self): ...

class cached_property(property):
    __name__: Any
    __module__: Any
    __doc__: Any
    func: Any
    def __init__(self, func: Callable, name: str = ..., doc: str = ...) -> None: ...
    def __set__(self, obj, value) -> None: ...
    def __get__(self, obj, type: Any | None = ...): ...

class cached_contextmanager:
    def __init__(self, cache_key_template: Any | None = ...) -> None: ...
    def __call__(self, func): ...

def reserve_free_port(host: str = ...) -> None: ...
def is_url(url: str) -> bool: ...
def dump_to_yaml_str(yaml_dict): ...
def pb_to_yaml(message: Message) -> str: ...
def ProtoMessageToDict(protobuf_msg: Message, **kwargs) -> object: ...
def status_pb_to_error_code_and_message(pb_status) -> Tuple[int, str]: ...

class catch_exceptions:
    exceptions: Any
    fallback: Any
    def __init__(self, exceptions, fallback: Any | None = ...) -> None: ...
    def __call__(self, func): ...

def resolve_bundle_path(bento: str, pip_installed_bundle_path: Optional[str] = ..., yatai_url: Optional[str] = ...) -> str: ...
def resolve_bento_bundle_uri(bento_pb): ...
def archive_directory_to_tar(source_dir: str, tarfile_dir: str, tarfile_name: str) -> Tuple[str, str]: ...
