from bentoml.exceptions import BentoMLException as BentoMLException, YataiDeploymentException as YataiDeploymentException
from bentoml.utils import status_pb_to_error_code_and_message as status_pb_to_error_code_and_message
from bentoml.yatai.client.label_utils import generate_gprc_labels_selector as generate_gprc_labels_selector
from bentoml.yatai.deployment import ALL_NAMESPACE_TAG as ALL_NAMESPACE_TAG
from bentoml.yatai.deployment_utils import deployment_dict_to_pb as deployment_dict_to_pb, deployment_yaml_string_to_pb as deployment_yaml_string_to_pb
from bentoml.yatai.proto import status_pb2 as status_pb2
from bentoml.yatai.proto.deployment_pb2 import ApplyDeploymentRequest as ApplyDeploymentRequest, DeleteDeploymentRequest as DeleteDeploymentRequest, Deployment as Deployment, DeploymentSpec as DeploymentSpec, DeploymentState as DeploymentState, DescribeDeploymentRequest as DescribeDeploymentRequest, GetDeploymentRequest as GetDeploymentRequest, ListDeploymentsRequest as ListDeploymentsRequest
from typing import Any

logger: Any
WAIT_TIMEOUT_LIMIT: int
WAIT_TIME: int

class DeploymentAPIClient:
    yatai_service: Any
    def __init__(self, yatai_service) -> None: ...
    def list(self, limit: Any | None = ..., offset: Any | None = ..., labels: Any | None = ..., namespace: Any | None = ..., is_all_namespaces: bool = ..., operator: Any | None = ..., order_by: Any | None = ..., ascending_order: Any | None = ...): ...
    def get(self, namespace, name): ...
    def describe(self, namespace, name): ...
    def delete(self, deployment_name, namespace, force_delete: bool = ...): ...
    def create(self, deployment_info, wait): ...
    def apply(self, deployment_info, wait): ...
    def create_sagemaker_deployment(self, name, bento_name, bento_version, api_name, instance_type, instance_count, timeout, num_of_gunicorn_workers_per_instance: Any | None = ..., region: Any | None = ..., namespace: Any | None = ..., labels: Any | None = ..., annotations: Any | None = ..., wait: Any | None = ..., data_capture_s3_prefix: Any | None = ..., data_capture_sample_percent: Any | None = ...): ...
    def update_sagemaker_deployment(self, deployment_name, namespace: Any | None = ..., api_name: Any | None = ..., instance_type: Any | None = ..., instance_count: Any | None = ..., timeout: Any | None = ..., num_of_gunicorn_workers_per_instance: Any | None = ..., bento_name: Any | None = ..., bento_version: Any | None = ..., wait: Any | None = ..., data_capture_s3_prefix: Any | None = ..., data_capture_sample_percent: Any | None = ...): ...
    def list_sagemaker_deployments(self, limit: Any | None = ..., offset: Any | None = ..., labels: Any | None = ..., namespace: Any | None = ..., is_all_namespaces: bool = ..., order_by: Any | None = ..., ascending_order: Any | None = ...): ...
    def create_ec2_deployment(self, name, namespace, bento_name, bento_version, region, min_size, desired_capacity, max_size, instance_type, ami_id, wait: Any | None = ...): ...
    def update_ec2_deployment(self, deployment_name, bento_name, bento_version, namespace, min_size, desired_capacity, max_size, instance_type, ami_id, wait): ...
    def list_ec2_deployments(self, limit: Any | None = ..., offset: Any | None = ..., labels: Any | None = ..., namespace: Any | None = ..., order_by: Any | None = ..., ascending_order: Any | None = ..., is_all_namespaces: bool = ...): ...
    def create_lambda_deployment(self, name, bento_name, bento_version, memory_size, timeout, api_name: Any | None = ..., region: Any | None = ..., namespace: Any | None = ..., labels: Any | None = ..., annotations: Any | None = ..., wait: Any | None = ...): ...
    def update_lambda_deployment(self, deployment_name, namespace: Any | None = ..., bento_name: Any | None = ..., bento_version: Any | None = ..., memory_size: Any | None = ..., timeout: Any | None = ..., wait: Any | None = ...): ...
    def list_lambda_deployments(self, limit: Any | None = ..., offset: Any | None = ..., labels: Any | None = ..., namespace: Any | None = ..., is_all_namespaces: bool = ..., order_by: Any | None = ..., ascending_order: Any | None = ...): ...
    def create_azure_functions_deployment(self, name, bento_name, bento_version, location, premium_plan_sku: Any | None = ..., min_instances: Any | None = ..., max_burst: Any | None = ..., function_auth_level: Any | None = ..., namespace: Any | None = ..., labels: Any | None = ..., annotations: Any | None = ..., wait: Any | None = ...): ...
    def update_azure_functions_deployment(self, deployment_name, bento_name: Any | None = ..., bento_version: Any | None = ..., max_burst: Any | None = ..., min_instances: Any | None = ..., premium_plan_sku: Any | None = ..., namespace: Any | None = ..., wait: Any | None = ...): ...
    def list_azure_functions_deployments(self, limit: Any | None = ..., offset: Any | None = ..., labels: Any | None = ..., namespace: Any | None = ..., is_all_namespaces: bool = ..., order_by: Any | None = ..., ascending_order: Any | None = ...): ...
