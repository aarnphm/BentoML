from bentoml.configuration import get_debug_mode as get_debug_mode
from bentoml.configuration.containers import BentoMLContainer as BentoMLContainer
from bentoml.exceptions import BentoMLException as BentoMLException
from bentoml.marshal.utils import DataLoader as DataLoader, MARSHAL_REQUEST_HEADER as MARSHAL_REQUEST_HEADER
from bentoml.server.instruments import InstrumentMiddleware as InstrumentMiddleware
from bentoml.service import InferenceAPI as InferenceAPI
from bentoml.types import HTTPRequest as HTTPRequest
from bentoml.utils.open_api import get_open_api_spec_json as get_open_api_spec_json
from typing import Any

feedback_logger: Any
logger: Any
DEFAULT_INDEX_HTML: str
SWAGGER_HTML: str

def log_exception(exc_info) -> None: ...

class ModelApp:
    bento_service: Any
    app: Any
    static_path: Any
    enable_swagger: Any
    enable_metrics: Any
    enable_feedback: Any
    tracer: Any
    swagger_path: Any
    def __init__(self, bundle_path: str = ..., app_name: str = ..., enable_swagger: bool = ..., enable_metrics: bool = ..., enable_feedback: bool = ..., tracer=...) -> None: ...
    def run(self, port: int = ..., host: str = ...): ...
    @staticmethod
    def static_serve(static_path, file_path): ...
    @staticmethod
    def index_view_func(static_path): ...
    def default_index_view_func(self): ...
    def swagger_ui_func(self): ...
    @staticmethod
    def swagger_static(static_path, filename): ...
    @staticmethod
    def docs_view_func(bento_service): ...
    @staticmethod
    def healthz_view_func(): ...
    @staticmethod
    def metadata_json_func(bento_service): ...
    @staticmethod
    def feedback_view_func(bento_service): ...
    def setup_routes(self) -> None: ...
    def setup_bento_service_api_routes(self) -> None: ...
    def get_app(self): ...
    def bento_service_api_func_wrapper(self, api: InferenceAPI): ...
    def metrics_view_func(self, client=...): ...
