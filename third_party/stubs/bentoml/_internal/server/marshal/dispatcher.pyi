from bentoml.utils import cached_property as cached_property
from bentoml.utils.alg import TokenBucket as TokenBucket
from typing import Any, Callable

logger: Any

class NonBlockSema:
    sema: Any
    def __init__(self, count) -> None: ...
    def acquire(self): ...
    def is_locked(self): ...
    def release(self) -> None: ...

class Optimizer:
    N_KEPT_SAMPLE: int
    N_SKIPPED_SAMPLE: int
    INTERVAL_REFRESH_PARAMS: int
    o_stat: Any
    o_a: int
    o_b: int
    wait: float
    def __init__(self) -> None: ...
    def log_outbound(self, n, wait, duration) -> None: ...
    def trigger_refresh(self) -> None: ...

class CorkDispatcher:
    max_latency_in_ms: Any
    callback: Any
    fallback: Any
    optimizer: Any
    max_batch_size: Any
    tick_interval: float
    def __init__(self, max_latency_in_ms: int, max_batch_size: int, shared_sema: NonBlockSema = ..., fallback: Callable = ...) -> None: ...
    async def shutdown(self) -> None: ...
    def __call__(self, callback): ...
    async def controller(self) -> None: ...
    async def inbound_call(self, data): ...
    async def outbound_call(self, inputs_info) -> None: ...
